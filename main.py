#import telebot
from aiogram import Bot, Dispatcher, executor, types

bot = Bot('6025564381:AAE0nNtkoOrNBNstPQFexvEVdyh_U9kNlsA')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message): #(message: types.message)
    await bot.send_sticker(message.from_user.id, sticker='CAACAgQAAxkBAAEIuJFkR6hI7xeNZE6F0DZix_p7geY8IAACawADzjkIDVlm6mN2kkvQLwQ')
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üôå\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞')
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ö–∏–Ω–æ', callback_data='cinema')
    btn2 = types.InlineKeyboardButton('–¢–µ–∞—Ç—Ä', callback_data='theatre')
    btn3 = types.InlineKeyboardButton('–ö–æ–Ω—Ü–µ—Ä—Ç—ã', callback_data='concert')
    btn4 = types.InlineKeyboardButton('–í—ã—Å—Ç–∞–≤–∫–∏', callback_data='exhibition')
    btn5 = types.InlineKeyboardButton('–î–∞–ª—å—à–µ‚û°Ô∏è', callback_data='next')
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    markup.row(btn5)
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç', reply_markup=markup)

@dp.callback_query_handler()
async def callback_message(callback):
    if callback.data == 'next':
        await callback.message.delete()
        markup = types.InlineKeyboardMarkup()
        btn6 = types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='followweek')
        btn7 = types.InlineKeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö', callback_data='follownew')
        btn8 = types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—ÉüèÅ', callback_data='finish')
        markup.add(btn6)
        markup.add(btn7)
        markup.add(btn8)
        await callback.message.answer('–ö–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å?\n'
                                      '–£ –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, '
                                      '–∞ —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.'
                                      '\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–±–µ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=markup)
    elif callback.data == 'finish':
        #await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.message.delete()
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')


@dp.message_handler(commands=['info'])
async def info(message):
    await message.answer('EventsNN - —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ. '
                                     '–° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –≤—ã —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –Ω–∞–π–¥–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å.\n')

@dp.message_handler(commands=['events'])
async def events(message):
    pass

executor.start_polling(dp)
